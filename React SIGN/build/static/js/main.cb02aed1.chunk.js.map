{"version":3,"sources":["Assets/tableDetail.js","Assets/table.js","App.js","serviceWorker.js","index.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","APILink","window","location","href","split","rows","fetch","then","res","json","useStyles","makeStyles","table","minWidth","CustomizedTablesDetail","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","promiseFn","Loading","Resolved","data","TableBody","map","row","key","no","scope","finishscore","timescore","Rejected","error","message","loadData","Tables","username","nama","asalSekolah","Link","Button","target","App","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oVAWMA,EAAkBC,aAAW,SAAAC,GAAK,MAAK,CAC3CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,OANUV,CAQpBW,KAEEC,EAAiBZ,aAAW,SAAAC,GAAK,MAAK,CAC1CY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBF,EAAMG,QAAQU,WAAWC,aAHzBf,CAMnBgB,KAKAC,EAAU,+EAHCC,OAAOC,SAASC,KAETC,MAAM,uDAC0E,GAEhGC,EAAO,kBACTC,MAAMN,GAASO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAE7BC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAIC,SAASC,IACtB,IAAMC,EAAUL,IAChB,OACE,kBAACM,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQH,MAAOS,aAAW,oBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACvB,EAAA,EAAD,KACE,kBAACjB,EAAD,aACA,kBAACA,EAAD,CAAiByC,MAAM,UAAvB,gBACA,kBAACzC,EAAD,CAAiByC,MAAM,UAAvB,eAGJ,kBAAC,IAAD,CAAOC,UAAWnB,GAChB,kBAAC,IAAMoB,QAAP,qBACA,kBAAC,IAAMC,SAAP,MACG,SAAAC,GACC,OACE,kBAACC,EAAA,EAAD,KACGD,EAAKE,KAAI,SAAAC,GAAG,OACX,kBAACnC,EAAD,CAAgBoC,IAAKD,EAAIE,IACvB,kBAAClD,EAAD,CAAiBmC,UAAU,KAAKgB,MAAM,OACnCH,EAAIE,IAEP,kBAAClD,EAAD,CAAiByC,MAAM,UAAUO,EAAII,aACrC,kBAACpD,EAAD,CAAiByC,MAAM,UAAUO,EAAIK,mBAOjD,kBAAC,IAAMC,SAAP,MACG,SAAAC,GAAK,sCAA4BA,EAAMC,eC9DpD,IAAMxD,EAAkBC,aAAW,SAAAC,GAAK,MAAK,CAC3CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,OANUV,CAQpBW,KAEEC,EAAiBZ,aAAW,SAAAC,GAAK,MAAK,CAC1CY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBF,EAAMG,QAAQU,WAAWC,aAHzBf,CAMnBgB,KAEEW,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAIR0B,EAAW,kBACbjC,MAAM,oEAAoEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAkD/E+B,MAhDf,WACE,IAAMzB,EAAUL,IAChB,OACI,kBAACM,EAAA,EAAD,CAAgBC,UAAWC,KAC3B,kBAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQH,MAAOS,aAAW,oBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACvB,EAAA,EAAD,KACE,kBAAC,EAAD,CAAiBwB,MAAM,UAAvB,YACA,kBAAC,EAAD,CAAiBA,MAAM,UAAvB,QACA,kBAAC,EAAD,CAAiBA,MAAM,UAAvB,gBACA,kBAAC,EAAD,CAAiBA,MAAM,UAAvB,gBACA,kBAAC,EAAD,CAAiBA,MAAM,UAAvB,aACA,kBAAC,EAAD,CAAiBA,MAAM,UAAvB,UACA,kBAAC,EAAD,CAAiBA,MAAM,UAAvB,iBAGF,kBAAC,IAAD,CAAOC,UAAWe,GAChB,kBAAC,IAAMd,QAAP,mBACA,kBAAC,IAAMC,SAAP,MACG,SAAAC,GACC,OACE,kBAACC,EAAA,EAAD,KACCD,EAAKE,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAiBb,UAAU,MAC1Ba,EAAIW,UAEL,kBAAC,EAAD,CAAiBlB,MAAM,QAAQO,EAAIY,MACnC,kBAAC,EAAD,CAAiBnB,MAAM,QAAQO,EAAIa,aACnC,kBAAC,EAAD,CAAiBpB,MAAM,UAAUO,EAAII,aACrC,kBAAC,EAAD,CAAiBX,MAAM,UAAUO,EAAIK,WACrC,kBAAC,EAAD,CAAiBZ,MAAM,UAAS,kBAACqB,EAAA,EAAD,CAAMzC,KAAM,oBAAoB2B,EAAIW,UAAU,kBAACI,EAAA,EAAD,iBAC9E,kBAAC,EAAD,CAAiBtB,MAAM,UAAS,kBAACqB,EAAA,EAAD,CAAMzC,KAAM,qEAAqE2B,EAAIW,SAAUK,OAAO,UAAS,kBAACD,EAAA,EAAD,CAAQvD,MAAM,WAAd,kBAOvJ,kBAAC,IAAM8C,SAAP,MACG,SAAAC,GAAK,sCAA6BA,EAAMC,gBCrDxCS,MAjBf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCPQC,QACW,cAA7BhD,OAAOC,SAASgD,UAEe,UAA7BjD,OAAOC,SAASgD,UAEhBjD,OAAOC,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,kB","file":"static/js/main.cb02aed1.chunk.js","sourcesContent":["import React from 'react';\nimport Async from 'react-async';\nimport {withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n}))(TableRow);\n\nconst params = window.location.href;\n//disesuaikan denagn link aplikasi\nvar username = params.split(\"https://sign-e15cc.firebaseapp.com/detail?username=\");\nvar APILink = 'https://us-central1-sign-e15cc.cloudfunctions.net/server/getScores?username='+username[1];\n\nconst rows = () =>//disesuaikan denagn link API\n    fetch(APILink).then(res => res.json())\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nexport default function CustomizedTablesDetail() {\n  const classes = useStyles();\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Game</StyledTableCell>\n            <StyledTableCell align=\"center\">Finish Score</StyledTableCell>\n            <StyledTableCell align=\"center\">TimeScore</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <Async promiseFn={rows}>\n          <Async.Loading>Loading.....</Async.Loading>\n          <Async.Resolved>\n            {data=>{\n              return(\n                <TableBody>\n                  {data.map(row => (\n                    <StyledTableRow key={row.no}>\n                      <StyledTableCell component=\"th\" scope=\"row\">\n                        {row.no}\n                      </StyledTableCell>\n                      <StyledTableCell align=\"center\">{row.finishscore}</StyledTableCell>\n                      <StyledTableCell align=\"center\">{row.timescore}</StyledTableCell>\n                    </StyledTableRow>\n                  ))}\n                </TableBody>\n              )\n            }}\n          </Async.Resolved>\n          <Async.Rejected>\n            {error=> `Something went wrong: ${error.message}`}\n          </Async.Rejected>\n        </Async>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from 'react';\nimport Async from 'react-async';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Button, Link } from '@material-ui/core';\nimport './tableDetail';\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n}))(TableRow);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nconst loadData = () =>//disesuaikan dengan link API\n    fetch(\"https://us-central1-sign-e15cc.cloudfunctions.net/server/getData\").then(res => res.json())\n\nfunction Tables() {\n  const classes = useStyles();\n  return (\n      <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell align='center'>Username</StyledTableCell>\n            <StyledTableCell align=\"center\">Nama</StyledTableCell>\n            <StyledTableCell align=\"center\">Asal Sekolah</StyledTableCell>\n            <StyledTableCell align=\"center\">Finish Score</StyledTableCell>\n            <StyledTableCell align=\"center\">TimeScore</StyledTableCell>\n            <StyledTableCell align=\"center\">Detail</StyledTableCell>\n            <StyledTableCell align=\"center\">Certificate</StyledTableCell>\n          </TableRow>\n        </TableHead>\n          <Async promiseFn={loadData}>\n            <Async.Loading>Loading...</Async.Loading>\n            <Async.Resolved>\n              {data=>{\n                return(\n                  <TableBody>\n                  {data.map(row => (\n                    <StyledTableRow >\n                    <StyledTableCell component=\"th\">\n                    {row.username}\n                    </StyledTableCell>\n                    <StyledTableCell align=\"left\">{row.nama}</StyledTableCell>\n                    <StyledTableCell align=\"left\">{row.asalSekolah}</StyledTableCell>\n                    <StyledTableCell align=\"center\">{row.finishscore}</StyledTableCell>\n                    <StyledTableCell align=\"center\">{row.timescore}</StyledTableCell>\n                    <StyledTableCell align=\"center\"><Link href={'/detail?username='+row.username}><Button>Detail</Button></Link></StyledTableCell>\n                    <StyledTableCell align=\"center\"><Link href={'https://us-central1-sign-e15cc.cloudfunctions.net/server?username='+row.username} target=\"_blank\"><Button color=\"primary\">Open</Button></Link></StyledTableCell>\n                    </StyledTableRow>\n                  ))}\n                  </TableBody>\n                )\n              }}\n            </Async.Resolved>\n            <Async.Rejected>\n              {error => `Something went wrong: ${error.message}`}\n            </Async.Rejected>\n        </Async>\n        </Table>\n      </TableContainer>\n    );\n}\n\nexport default Tables;\n","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Tables from './Assets/table';\nimport Detail from './Assets/tableDetail';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/detail\">\n            <Detail/>\n          </Route>\n          <Route path=\"/\">\n            <Tables/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}